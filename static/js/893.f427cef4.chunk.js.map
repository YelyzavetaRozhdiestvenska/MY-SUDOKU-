{"version":3,"file":"static/js/893.f427cef4.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/game/Game.module.css?f1cb","../node_modules/clsx/dist/clsx.mjs","webpack://react-homework-template/./src/components/sudokuField/Table.module.css?a698","components/sudokuField/Table.jsx","webpack://react-homework-template/./src/components/newGame/NewGame.module.css?1dac","components/newGame/NewGame.jsx","webpack://react-homework-template/./src/components/timer/Timer.module.css?9b43","components/timer/Timer.jsx","webpack://react-homework-template/./src/components/levelFilter/LevelGameBtn.module.css?6d1e","components/levelFilter/LevelGameBtn.jsx","webpack://react-homework-template/./src/components/button/ControlBtn.module.css?b885","components/button/ControlBtn.jsx","components/functionsSudoku.js","pages/game/Game.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"game\":\"Game_game__Hcwmi\"};","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","// extracted by mini-css-extract-plugin\nexport default {\"cellInput\":\"Table_cellInput__pwy-U\",\"bBorder\":\"Table_bBorder__dieyd\",\"rBorder\":\"Table_rBorder__SWuFF\"};","import React from 'react';\nimport css from './Table.module.css';\n\nconst Table = ({ sudokuArr, onInputChange }) => {\n  return (\n    <table>\n      <tbody>\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((row, rIndex) => {\n          return (\n            <tr key={rIndex} className={(row + 1) % 3 === 0 ? css.bBorder : ''}>\n              {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((column, cIndex) => {\n                return (\n                  <td\n                    key={rIndex + cIndex}\n                    className={(column + 1) % 3 === 0 ? css.rBorder : ''}\n                  >\n                    <input\n                      onChange={e => {\n                        onInputChange(e, row, column);\n                      }}\n                      className={css.cellInput}\n                      value={\n                        sudokuArr[row][column] === -1\n                          ? ''\n                          : sudokuArr[row][column]\n                      }\n                    />\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\nexport default Table;\n","// extracted by mini-css-extract-plugin\nexport default {\"newGameButton\":\"NewGame_newGameButton__yq-+B\"};","import React from 'react';\nimport css from './NewGame.module.css';\n\nconst NewGameBtn = ({ newGame }) => {\n  return (\n    <button className={css.newGameButton} onClick={newGame}>\n      New Game\n    </button>\n  );\n};\n\nexport default NewGameBtn;\n","// extracted by mini-css-extract-plugin\nexport default {\"timer\":\"Timer_timer__Hgsh0\"};","import React from 'react';\nimport css from './Timer.module.css';\n\nconst Timer = ({ time }) => {\n  return (\n    <div className={css.timer}>\n      Time: {new Date(time * 1000).toISOString().substr(11, 8)}\n    </div>\n  );\n};\nexport default Timer;\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonLevel\":\"LevelGameBtn_buttonLevel__sGdQN\",\"easyButton\":\"LevelGameBtn_easyButton__+NlTb\",\"mediumButton\":\"LevelGameBtn_mediumButton__5tbQM\",\"expertButton\":\"LevelGameBtn_expertButton__lPgFc\"};","import React from 'react';\nimport css from './LevelGameBtn.module.css';\n\nconst BtnCont = ({ switchDifficulty }) => {\n  return (\n    <div className={css.buttonLevel}>\n      <button className={css.easyButton} onClick={() => switchDifficulty(20)}>\n        Easy\n      </button>\n      <button className={css.mediumButton} onClick={() => switchDifficulty(40)}>\n        Medium\n      </button>\n      <button className={css.expertButton} onClick={() => switchDifficulty(60)}>\n        Expert\n      </button>\n    </div>\n  );\n};\nexport default BtnCont;\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonContainer\":\"ControlBtn_buttonContainer__TrTJw\",\"checkButton\":\"ControlBtn_checkButton__3aC7k\",\"solveButton\":\"ControlBtn_solveButton__kv11F\",\"resetButton\":\"ControlBtn_resetButton__KVivx\"};","import React from 'react';\nimport css from './ControlBtn.module.css';\n\nconst ControlBtnCont = ({ solveSudoku, resetSudoku, checkSudoku }) => {\n  return (\n    <div className={css.buttonContainer}>\n      <button className={css.checkButton} onClick={checkSudoku}>\n        Check\n      </button>\n      <button className={css.solveButton} onClick={solveSudoku}>\n        Solve\n      </button>\n      <button className={css.resetButton} onClick={resetSudoku}>\n        Reset\n      </button>\n    </div>\n  );\n};\nexport default ControlBtnCont;\n","const GRID_SIZE = 9;\nconst BOX_SIZE = 3;\n// >>>>>Генерация таблицы судоку>>>>>>>>\n\nexport function getDeepCopy(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nexport function generateSudoku() {\n  const sudoku = createEmptyGrid();\n  resolveSudoku(sudoku);\n  return sudoku;\n}\n\n// создаем 9 массивов и заполняем каждый из них массивом из 9\nexport function createEmptyGrid() {\n  return new Array(GRID_SIZE).fill().map(() => new Array(GRID_SIZE).fill(-1));\n}\n\n// Заполняет двухмерный массив числами, чтоб получилась корректная сетка судоку\nfunction resolveSudoku(grid) {\n  // находим пустую ячейку\n  const emptyCell = findEmptyCell(grid);\n  //Eсли не находим пустую ячейку, таблица заполнена:\n  if (!emptyCell) return true;\n\n  const numbers = getRandomNumbers();\n\n  // рекурсия\n  for (let i = 0; i < numbers.length; i++) {\n    if (!validate(grid, emptyCell.row, emptyCell.column, numbers[i])) continue;\n\n    grid[emptyCell.row][emptyCell.column] = numbers[i];\n\n    if (resolveSudoku(grid)) return true;\n\n    grid[emptyCell.row][emptyCell.column] = -1;\n  }\n}\n\nfunction findEmptyCell(grid) {\n  for (let row = 0; row < GRID_SIZE; row++) {\n    for (let column = 0; column < GRID_SIZE; column++) {\n      if (grid[row][column] === -1) return { row, column };\n    }\n  }\n  // Если нет пустых ячеек:\n  return null;\n}\n\nfunction getRandomNumbers() {\n  // создаем упорядоченный массив:\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  // перемешиваем массив:\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    const randomIndex = Math.floor(Math.random() * (i + 1));\n    [numbers[i], numbers[randomIndex]] = [numbers[randomIndex], numbers[i]];\n  }\n\n  return numbers;\n}\n\nfunction validate(grid, row, column, value) {\n  return (\n    validateColumn(grid, row, column, value) &&\n    validateRow(grid, row, column, value) &&\n    validateBox(grid, row, column, value)\n  );\n}\n\nfunction validateColumn(grid, row, column, value) {\n  // пробегаемся по всем строкам в столбце, кроме ячейки row, в которую вписываем значение.\n  // iRow - индекс прoверяемой строки\n  for (let iRow = 0; iRow < GRID_SIZE; iRow++) {\n    if (grid[iRow][column] === value && iRow !== row) return false;\n  }\n  return true;\n}\n\nfunction validateRow(grid, row, column, value) {\n  for (let iColumn = 0; iColumn < GRID_SIZE; iColumn++) {\n    if (grid[row][iColumn] === value && iColumn !== column) return false;\n  }\n  return true;\n}\n\n//Чтоб получить координаты внутреннего верхнего левого квадрата, нужно найти смещение от среднего нижнего квардата.\n//  Чтоб вычислить смещение, нужно получить остаток от деления координат нижней ячейки на размер маленького квадрата\nfunction validateBox(grid, row, column, value) {\n  const firstRowInBox = row - (row % BOX_SIZE);\n  const firstColumnInBox = column - (column % BOX_SIZE);\n\n  for (let iRow = firstRowInBox; iRow < firstRowInBox + BOX_SIZE; iRow++) {\n    for (\n      let iColumn = firstColumnInBox;\n      iColumn < firstColumnInBox + BOX_SIZE;\n      iColumn++\n    ) {\n      if (grid[iRow][iColumn] === value && iRow !== row && iColumn !== column)\n        return false;\n    }\n  }\n  return true;\n}\n\nexport function removeCells(grid, difficulty) {\n  // количество заполняемых ячеек\n\n  const resultGrid = [...grid].map(row => [...row]);\n\n  let i = 0;\n  while (i < difficulty) {\n    let row = Math.floor(Math.random() * GRID_SIZE);\n    let column = Math.floor(Math.random() * GRID_SIZE);\n    if (resultGrid[row][column] !== -1) {\n      resultGrid[row][column] = -1;\n      i++;\n    }\n  }\n  return resultGrid;\n}\n\n// >>>>>>>>>>Решение игры>>>>>>>>>>>>>>>>>>>>>>>>\n\nexport function compareSudokus(currentSudoku, solvedSudoku) {\n  let res = {\n    isComplete: true,\n    isSolvable: true,\n  };\n  for (var i = 0; i < 9; i++) {\n    for (var j = 0; j < 9; j++) {\n      console.log(`${currentSudoku[i][j]}-${solvedSudoku[i][j]}`);\n\n      if (currentSudoku[i][j] !== solvedSudoku[i][j]) {\n        if (currentSudoku[i][j] !== -1) {\n          res.isSolvable = false;\n        }\n        res.isComplete = false;\n      }\n    }\n  }\n  return res;\n}\n\nexport function checkRow(grid, row, num) {\n  return grid[row].indexOf(num) === -1;\n}\nexport function checkColumn(grid, column, num) {\n  return grid.map(row => row[column]).indexOf(num) === -1;\n}\nexport function checkBox(grid, row, column, num) {\n  let boxArr = [],\n    rowStart = row - (row % 3),\n    columnStart = column - (column % 3);\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      boxArr.push(grid[rowStart + i][columnStart + j]);\n    }\n  }\n  return boxArr.indexOf(num) === -1;\n}\n\nexport function checkValid(grid, row, column, num) {\n  if (\n    checkRow(grid, row, num) &&\n    checkColumn(grid, column, num) &&\n    checkBox(grid, row, column, num)\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport function getNext(row, column) {\n  return column !== 8 ? [row, column + 1] : row !== 8 ? [row + 1, 0] : [0, 0];\n}\n\nexport function solver(grid, row = 0, column = 0) {\n  if (grid[row][column] !== -1) {\n    let isLast = row >= 8 && column >= 8;\n    if (!isLast) {\n      let [newRow, newColumn] = getNext(row, column);\n      return solver(grid, newRow, newColumn);\n    }\n  }\n\n  for (let num = 1; num <= 9; num++) {\n    if (checkValid(grid, row, column, num)) {\n      grid[row][column] = num;\n      let [newRow, newColumn] = getNext(row, column);\n\n      if (!newRow && !newColumn) {\n        return true;\n      }\n\n      if (solver(grid, newRow, newColumn)) {\n        return true;\n      }\n    }\n  }\n  grid[row][column] = -1;\n  return false;\n}\n","import css from './Game.module.css';\nimport React, { useState, useEffect } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Table from '../../components/sudokuField/Table.jsx';\nimport NewGameBtn from '../../components/newGame/NewGame.jsx';\nimport Timer from '../../components/timer/Timer';\nimport BtnCont from '../../components/levelFilter/LevelGameBtn.jsx';\nimport ControlBtnCont from '../../components/button/ControlBtn.jsx';\nimport {\n  generateSudoku,\n  getDeepCopy,\n  removeCells,\n  createEmptyGrid,\n  checkValid,\n  solver,\n  compareSudokus,\n} from '../../components/functionsSudoku.js';\n\nconst Game = () => {\n  const [difficulty, setDifficulty] = useState(81);\n  const [sudokuArr, setSudokuArr] = useState(createEmptyGrid());\n  const [time, setTime] = useState(0);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [initialSudokuArr, setInitialSudokuArr] = useState(createEmptyGrid());\n\n  useEffect(() => {\n    const initialSudoku = generateSudoku();\n    const sudokuWithRemovedCells = removeCells(initialSudoku, difficulty);\n    setSudokuArr(sudokuWithRemovedCells);\n    setInitialSudokuArr(sudokuWithRemovedCells);\n\n    let timer;\n    if (gameStarted) {\n      timer = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [difficulty, gameStarted]);\n\n  function newGame() {\n    const newSudoku = generateSudoku();\n    const sudokuWithRemovedCells = removeCells(newSudoku, difficulty);\n    setSudokuArr(sudokuWithRemovedCells);\n    setInitialSudokuArr(sudokuWithRemovedCells);\n    setGameStarted(true);\n    setTime(0);\n  }\n\n  function onInputChange(e, row, column) {\n    var value = parseInt(e.target.value) || -1,\n      grid = getDeepCopy(sudokuArr);\n    if (\n      value === -1 ||\n      (value >= 1 && value <= 9 && checkValid(grid, row, column, value))\n    ) {\n      grid[row][column] = value;\n    } else {\n      toast.error('Incorrect value! Try again!!!');\n    }\n\n    setSudokuArr(grid);\n    setGameStarted(true);\n  }\n\n  function solveSudoku() {\n    let sudoku = getDeepCopy(sudokuArr);\n    solver(sudoku);\n    setSudokuArr(sudoku);\n  }\n\n  function checkSudoku() {\n    let solvedSudoku = getDeepCopy(initialSudokuArr);\n    solver(solvedSudoku);\n    let compare = compareSudokus(sudokuArr, solvedSudoku);\n    if (compare.isComplete) {\n      toast.success('Congratulations! You have solved Sudoku!');\n      setGameStarted(false);\n    } else {\n      toast.info('Keep going!');\n    }\n  }\n\n  function resetSudoku() {\n    setSudokuArr(getDeepCopy(initialSudokuArr));\n  }\n\n  return (\n    <div className={css.game}>\n      <main>\n        <h1>MY SUDOKU</h1>\n        <p>Choose your game level:</p>\n        <ToastContainer />\n\n        <BtnCont switchDifficulty={setDifficulty} />\n        <NewGameBtn newGame={newGame} />\n        <Timer time={time} />\n        <Table sudokuArr={sudokuArr} onInputChange={onInputChange} />\n        <ControlBtnCont\n          checkSudoku={checkSudoku}\n          solveSudoku={solveSudoku}\n          resetSudoku={resetSudoku}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default Game;\n"],"names":["r","e","t","f","n","Array","isArray","o","length","arguments","_ref","sudokuArr","onInputChange","_jsx","children","map","row","rIndex","className","css","column","cIndex","onChange","value","newGame","onClick","time","_jsxs","Date","toISOString","substr","switchDifficulty","solveSudoku","resetSudoku","checkSudoku","GRID_SIZE","BOX_SIZE","getDeepCopy","arr","JSON","parse","stringify","generateSudoku","sudoku","createEmptyGrid","resolveSudoku","fill","grid","emptyCell","findEmptyCell","numbers","i","randomIndex","Math","floor","random","getRandomNumbers","validate","iRow","validateColumn","iColumn","validateRow","firstRowInBox","firstColumnInBox","validateBox","removeCells","difficulty","resultGrid","checkValid","num","indexOf","checkRow","checkColumn","boxArr","rowStart","columnStart","j","push","checkBox","getNext","solver","undefined","newRow","newColumn","Game","setDifficulty","useState","setSudokuArr","setTime","gameStarted","setGameStarted","initialSudokuArr","setInitialSudokuArr","useEffect","sudokuWithRemovedCells","timer","setInterval","prevTime","clearInterval","ToastContainer","BtnCont","NewGameBtn","Timer","Table","parseInt","target","toast","error","ControlBtnCont","solvedSudoku","currentSudoku","res","isComplete","isSolvable","console","log","concat","compareSudokus","success","info"],"sourceRoot":""}